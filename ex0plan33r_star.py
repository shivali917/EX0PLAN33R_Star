# -*- coding: utf-8 -*-
"""EX0PLAN33R_Star.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/154ielRmxaV8bmxAyiudyGscMr4ZYVfBz
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
sns.set_style('darkgrid')
warnings.simplefilter("ignore")
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.preprocessing import OneHotEncoder
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import GridSearchCV
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.linear_model import LogisticRegression

from sklearn.metrics import accuracy_score

plt.rcParams['figure.figsize'] = [12, 6]
sns.set_theme(style="darkgrid")

df = pd.read_csv('6 class csv.csv')
df.head()

df['Spectral Class'].value_counts()

df.info()

star_color_label = df['Star color'].value_counts().nlargest(4)
plt.figure(figsize=(10, 5))
sns.barplot(star_color_label, star_color_label.index);
plt.ylabel('Color Name', fontsize=20)
plt.xlabel('Count', fontsize=20);

sp_class_label = df['Spectral Class'].value_counts()
plt.figure(figsize=(10, 5))
sns.barplot(sp_class_label, sp_class_label.index);
plt.ylabel('Labels Name', fontsize=20)
plt.xlabel('Count', fontsize=20);

X = df.copy() # feature variables
X.drop(['Star type'], inplace=True, axis=1) # drop the target variable
y = df['Star type'] # target variable
y = y.values.reshape(-1, 1)

sc = StandardScaler()
X.iloc[:, :-2] = sc.fit_transform(X.iloc[:, :-2])

oh_encoder = OneHotEncoder(handle_unknown='ignore', sparse=False)
oh_cols = pd.DataFrame(oh_encoder.fit_transform(X[['Star color', 'Spectral Class']]))

oh_cols.index = X.index
num_X = X.drop(['Star color', 'Spectral Class'], axis=1)

oh_X = pd.concat([num_X, oh_cols], axis=1)
oh_X

def best_params(params, model):
    parameters = params
    grid_search = GridSearchCV(estimator = model,
                               param_grid = parameters,
                               scoring = 'accuracy',
                               cv = 10,
                               return_train_score = True,
                               n_jobs = -1)

    grid_search.fit(X_train, y_train.ravel())
    best_acc = grid_search.best_score_
    best_parameters = grid_search.best_params_
    print()
    print("Best accuracy: {:.2f}".format(best_acc))
    print("Best Parameters:", best_parameters)
    print()

y = df[['Temperature (K)', 'Luminosity(L/Lo)', 'Radius(R/Ro)', 'Absolute magnitude(Mv)']]

star_color_label = {value: key for key, value in enumerate(df['Star color'].unique())}
spec_class_label = {value: key for key, value in enumerate(df['Spectral Class'].unique())}

df['Star color'] = df['Star color'].map(star_color_label)
df['Spectral Class'] = df['Spectral Class'].map(spec_class_label)

X = df[['Temperature (K)', 'Luminosity(L/Lo)', 'Radius(R/Ro)', 'Absolute magnitude(Mv)', 'Star color', 'Spectral Class']].values
y = df[['Star type']].values

plt.figure(figsize=(10, 10))
sns.heatmap(df.corr(), annot=True);
plt.title('Correlation Matrix', fontsize=20);

X_train, X_test, y_train, y_test = train_test_split(oh_X, y, test_size=0.25, random_state=5)

sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

logreg = LogisticRegression(random_state=42, max_iter=100)
logreg.fit(X_train, y_train)

from sklearn.metrics import classification_report, plot_confusion_matrix

predictions = logreg.predict(X_test)
print(classification_report(y_test, predictions))

plt.figure(figsize=(10, 10))
sns.heatmap(confusion_matrix(y_test, predictions), annot=True);

best_params({
    'C': range(1, 30),
    'kernel': ['linear', 'poly', 'rbf', 'sigmoid'],
    'degree': range(2, 10)
    }, 
    SVC()
)

SVCmodel = SVC(C=1.0, degree=2, kernel='linear').fit(X_train, y_train.ravel())
y_pred = SVCmodel.predict(X_test)

from sklearn import metrics
from sklearn.metrics import mean_squared_error, precision_score, confusion_matrix, accuracy_score

def evaluation(y_true, y_pred):
    
# Print Accuracy, Recall, F1 Score, and Precision metrics.
    print('Evaluation Metrics: Test Accuracy')
    print('Accuracy: ' + str(metrics.accuracy_score(y_test, y_pred)))

evaluation(y_test, y_pred)
